// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package main

import (
	"encoding/json"
	"errors"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for DataProcessingJobJobType.
const (
	DataProcessing DataProcessingJobJobType = "dataProcessing"
)

// Defines values for NotificationJobJobType.
const (
	Notification NotificationJobJobType = "notification"
)

// DataProcessingJob defines model for DataProcessingJob.
type DataProcessingJob struct {
	// Algorithm Algorithm to use for processing
	Algorithm string `json:"algorithm"`

	// Dataset Identifier for the dataset to be processed
	Dataset string                   `json:"dataset"`
	JobType DataProcessingJobJobType `json:"jobType"`
}

// DataProcessingJobJobType defines model for DataProcessingJob.JobType.
type DataProcessingJobJobType string

// Job defines model for Job.
type Job struct {
	// Id Unique identifier for the job
	Id         string        `json:"id"`
	Parameters JobParameters `json:"parameters"`
}

// JobParameters defines model for JobParameters.
type JobParameters struct {
	union json.RawMessage
}

// NotificationJob defines model for NotificationJob.
type NotificationJob struct {
	JobType NotificationJobJobType `json:"jobType"`

	// Message Message content
	Message string `json:"message"`

	// Recipient Recipient of the notification
	Recipient string `json:"recipient"`
}

// NotificationJobJobType defines model for NotificationJob.JobType.
type NotificationJobJobType string

// PostJobsJSONRequestBody defines body for PostJobs for application/json ContentType.
type PostJobsJSONRequestBody = Job

// AsDataProcessingJob returns the union data inside the JobParameters as a DataProcessingJob
func (t JobParameters) AsDataProcessingJob() (DataProcessingJob, error) {
	var body DataProcessingJob
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataProcessingJob overwrites any union data inside the JobParameters as the provided DataProcessingJob
func (t *JobParameters) FromDataProcessingJob(v DataProcessingJob) error {
	v.JobType = "dataProcessing"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataProcessingJob performs a merge with any union data inside the JobParameters, using the provided DataProcessingJob
func (t *JobParameters) MergeDataProcessingJob(v DataProcessingJob) error {
	v.JobType = "dataProcessing"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNotificationJob returns the union data inside the JobParameters as a NotificationJob
func (t JobParameters) AsNotificationJob() (NotificationJob, error) {
	var body NotificationJob
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationJob overwrites any union data inside the JobParameters as the provided NotificationJob
func (t *JobParameters) FromNotificationJob(v NotificationJob) error {
	v.JobType = "notification"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationJob performs a merge with any union data inside the JobParameters, using the provided NotificationJob
func (t *JobParameters) MergeNotificationJob(v NotificationJob) error {
	v.JobType = "notification"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobParameters) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"jobType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t JobParameters) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "dataProcessing":
		return t.AsDataProcessingJob()
	case "notification":
		return t.AsNotificationJob()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t JobParameters) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobParameters) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Submit a new job
	// (POST /jobs)
	PostJobs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostJobs converts echo context to params.
func (w *ServerInterfaceWrapper) PostJobs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostJobs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/jobs", wrapper.PostJobs)

}
